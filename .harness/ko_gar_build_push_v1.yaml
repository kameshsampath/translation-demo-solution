template:
  name: ko gar build push
  identifier: ko_gar_build_push
  versionLabel: v1
  type: Stage
  orgIdentifier: default
  projectIdentifier: Google_Cloud_Demos
  tags: {}
  spec:
    type: CI
    spec:
      caching:
        enabled: true
        paths:
          - /tools
      cloneCodebase: true
      sharedPaths:
        - /root/.docker
        - /tools
      infrastructure:
        type: KubernetesDirect
        spec:
          connectorRef: <+input>
          namespace: <+input>
          serviceAccountName: <+input>
          automountServiceAccountToken: true
          nodeSelector:
            iam.gke.io/gke-metadata-server-enabled: "true"
          os: Linux
      execution:
        steps:
          - step:
              type: Run
              name: Download Binaries
              identifier: Download_Binaries
              spec:
                connectorRef: account.DockerHub
                image: alpine
                shell: Sh
                command: |-
                  if [ ! -f /tools/docker-credential-gcr ] || [ ! -f /tools/ko ] ;
                   then 
                     apk add -U curl 
                     curl -sSL https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v2.1.8/docker-credential-gcr_linux_amd64-2.1.8.tar.gz | tar -zx
                     curl -sSL https://github.com/ko-build/ko/releases/download/v0.13.0/ko_0.13.0_Linux_x86_64.tar.gz | tar -zx

                     mkdir -p /tools
                     mv docker-credential-gcr ko /tools
                   fi
                   export PATH="$PATH:/tools"
                   docker-credential-gcr configure-docker --registries="$REGISTRY_LIST"
                envVariables:
                  REGISTRY_LIST: <+input>
                imagePullPolicy: IfNotPresent
              description: Download ko and docker-credential-gcr binaries
          - step:
              type: Run
              name: build and push
              identifier: ko_build_and_push
              spec:
                connectorRef: account.DockerHub
                image: golang:1.19-alpine3.17
                shell: Sh
                command: |-
                  export PATH=$PATH:/tools
                  docker-credential-gcr version && ko version
                  cd $APP_DIR
                  image_repo="$KO_DOCKER_REPO"
                  image_tag="<+codebase.shortCommitSha>"
                  image_fqn=$(ko build --bare --tags=$image_tag .)
                  image_digest=$(echo "$image_fqn" | cut -d '@' -f2)
                envVariables:
                  KO_DOCKER_REPO: <+input>
                  APP_DIR: <+input>
                outputVariables:
                  - name: image_repo
                    description: the built image repository
                  - name: image_tag
                    description: the built image tag
                  - name: image_digest
                    description: the image digest
                imagePullPolicy: IfNotPresent
                resources:
                  limits:
                    memory: 4G
                    cpu: 2000m
              description: Build application using ko and push the built container image to Google Artifact Registry
          - step:
              type: Run
              name: build manifests
              identifier: build_manifests
              spec:
                connectorRef: account.DockerHub
                image: kameshsampath/kube-dev-tools
                shell: Sh
                command: |-
                  if [ -d "$KUSTOMIZE_DIR" ];
                  then
                    kustomize build "$KUSTOMIZE_DIR" | envsubst | flux push artifact \
                      oci://$OCI_MANIFESTS_REPO:$OCI_MANIFESTS_TAG \
                      --path=- \
                      --source="<+codebase.repoUrl>" \
                      --revision="<+codebase.shortCommitSha>" \
                      --provider $OCI_PROVIDER
                  else
                    echo "No $KUSTOMIZE_DIR, skipping manifest build"
                  fi
                envVariables:
                  OCI_MANIFESTS_REPO: <+input>
                  OCI_MANIFESTS_TAG: <+input>
                  KUSTOMIZE_DIR: <+input>
                  OCI_PROVIDER: <+input>
                  APPLICATION_IMAGE: <+steps.ko_build_and_push.output.outputVariables.image_repo>
                  APPLICATION_IMAGE_TAG: <+steps.ko_build_and_push.output.outputVariables.image_tag>
                  APPLICATION_IMAGE_DIGEST: <+steps.ko_build_and_push.output.outputVariables.image_digest>
                  TRANSLATOR_GSA: <+input>
                imagePullPolicy: IfNotPresent
                resources:
                  limits:
                    memory: 1G
                    cpu: 1000m
              description: Build OCI image from kustomize configurations and push it to the OCI registry.
